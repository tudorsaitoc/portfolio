{"version":3,"sources":["../../src/query/graphql-span-tracer.ts"],"names":["GraphQLSpanTracer","constructor","name","activityArgs","parentActivity","report","phantomActivity","activities","Map","getParentActivity","start","end","forEach","activity","createResolverActivity","path","prev","key","parentSpan","getActivity","span","tags","field","pathToArray","join","setActivity","gqlPath","length","get","set","flattened","curr","push","reverse"],"mappings":";;;;;;;AAEA;;AAMA;;;;AAIe,MAAMA,iBAAN,CAAsD;AAInEC,EAAAA,WAAW,CAACC,IAAD,EAAeC,YAAf,EAA4C;AACrD,SAAKC,cAAL,GAAsBC,kBAAOC,eAAP,CACpBJ,IADoB,EAEpBC,YAFoB,CAAtB;AAIA,SAAKI,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACD;;AAEDC,EAAAA,iBAAiB,GAAqB;AACpC,WAAO,KAAKL,cAAZ;AACD;;AAEDM,EAAAA,KAAK,GAAS;AACZ,SAAKN,cAAL,CAAoBM,KAApB;AACD;;AAEDC,EAAAA,GAAG,GAAS;AACV,SAAKJ,UAAL,CAAgBK,OAAhB,CAAwBC,QAAQ,IAAI;AAClCA,MAAAA,QAAQ,CAACF,GAAT;AACD,KAFD;AAGA,SAAKP,cAAL,CAAoBO,GAApB;AACD;;AAEDG,EAAAA,sBAAsB,CAACC,IAAD,EAAab,IAAb,EAA6C;AACjE,QAAIc,IAAsB,GAAGD,IAAI,CAACC,IAAlC;;AACA,WAAO,iBAAOA,IAAP,0CAAO,MAAMC,GAAb,MAAsB,QAA7B,EAAsC;AAAA;;AACpCD,MAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AACD;;AACD,UAAME,UAAU,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,EAAuBI,IAA1C;;AACA,UAAMP,QAAQ,GAAGR,kBAAOC,eAAP,CAAwB,kBAAxB,EAA2C;AAC1DY,MAAAA,UAD0D;AAE1DG,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAEpB,IADH;AAEJa,QAAAA,IAAI,EAAEQ,WAAW,CAACR,IAAD,CAAX,CAAkBS,IAAlB,CAAwB,GAAxB;AAFF;AAFoD,KAA3C,CAAjB;;AAOA,SAAKC,WAAL,CAAiBV,IAAjB,EAAuBF,QAAvB;AACA,WAAOA,QAAP;AACD;;AAEDM,EAAAA,WAAW,CAACO,OAAD,EAA8C;AACvD,UAAMX,IAAI,GAAGQ,WAAW,CAACG,OAAD,CAAxB;AACA,QAAIb,QAAJ;;AACA,QAAIE,IAAI,CAACY,MAAL,GAAc,CAAlB,EAAqB;AACnBd,MAAAA,QAAQ,GAAG,KAAKN,UAAL,CAAgBqB,GAAhB,CAAoBb,IAAI,CAACS,IAAL,CAAW,GAAX,CAApB,CAAX;;AACA,UAAIX,QAAJ,EAAc;AACZ,eAAOA,QAAP;AACD;AACF;;AAED,WAAO,KAAKT,cAAZ;AACD;;AAEDqB,EAAAA,WAAW,CAACC,OAAD,EAAgBb,QAAhB,EAAkD;AAC3D,UAAME,IAAI,GAAGQ,WAAW,CAACG,OAAD,CAAxB;AACA,SAAKnB,UAAL,CAAgBsB,GAAhB,CAAoBd,IAAI,CAACS,IAAL,CAAW,GAAX,CAApB,EAAoCX,QAApC;AACD;;AA5DkE;;;;AA+DrE,SAASU,WAAT,CAAqBR,IAArB,EAAqE;AACnE,QAAMe,SAAiC,GAAG,EAA1C;AACA,MAAIC,IAAsB,GAAGhB,IAA7B;;AACA,SAAOgB,IAAP,EAAa;AACXD,IAAAA,SAAS,CAACE,IAAV,CAAeD,IAAI,CAACd,GAApB;AACAc,IAAAA,IAAI,GAAGA,IAAI,CAACf,IAAZ;AACD;;AACD,SAAOc,SAAS,CAACG,OAAV,EAAP;AACD","sourcesContent":["import { Path } from \"graphql/jsutils/Path\"\n\nimport report from \"gatsby-cli/lib/reporter\"\nimport { IActivityArgs } from \"gatsby-cli/src/reporter/reporter\"\nimport { IPhantomReporter } from \"gatsby-cli/src/reporter/reporter-phantom\"\n\nimport { IGraphQLSpanTracer } from \"../schema/type-definitions\"\n\n/**\n * Tracks and knows how to get a parent span for a particular\n *  point in query resolver for a particular query and path\n */\nexport default class GraphQLSpanTracer implements IGraphQLSpanTracer {\n  parentActivity: IPhantomReporter\n  activities: Map<string, IPhantomReporter>\n\n  constructor(name: string, activityArgs: IActivityArgs) {\n    this.parentActivity = report.phantomActivity(\n      name,\n      activityArgs\n    ) as IPhantomReporter\n    this.activities = new Map()\n  }\n\n  getParentActivity(): IPhantomReporter {\n    return this.parentActivity\n  }\n\n  start(): void {\n    this.parentActivity.start()\n  }\n\n  end(): void {\n    this.activities.forEach(activity => {\n      activity.end()\n    })\n    this.parentActivity.end()\n  }\n\n  createResolverActivity(path: Path, name: string): IPhantomReporter {\n    let prev: Path | undefined = path.prev\n    while (typeof prev?.key === `number`) {\n      prev = prev.prev\n    }\n    const parentSpan = this.getActivity(prev).span\n    const activity = report.phantomActivity(`GraphQL Resolver`, {\n      parentSpan,\n      tags: {\n        field: name,\n        path: pathToArray(path).join(`.`),\n      },\n    })\n    this.setActivity(path, activity)\n    return activity\n  }\n\n  getActivity(gqlPath: Path | undefined): IPhantomReporter {\n    const path = pathToArray(gqlPath)\n    let activity\n    if (path.length > 0) {\n      activity = this.activities.get(path.join(`.`))\n      if (activity) {\n        return activity\n      }\n    }\n\n    return this.parentActivity\n  }\n\n  setActivity(gqlPath: Path, activity: IPhantomReporter): void {\n    const path = pathToArray(gqlPath)\n    this.activities.set(path.join(`.`), activity)\n  }\n}\n\nfunction pathToArray(path: Path | undefined): Array<string | number> {\n  const flattened: Array<string | number> = []\n  let curr: Path | undefined = path\n  while (curr) {\n    flattened.push(curr.key)\n    curr = curr.prev\n  }\n  return flattened.reverse()\n}\n"],"file":"graphql-span-tracer.js"}